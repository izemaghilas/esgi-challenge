name: test and prepare (front and api) to deploy 

on: push

jobs:
  test-front:
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo front tests
  
  test-api:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.TEST_DB_NAME }} 
          POSTGRES_USER: ${{ secrets.TEST_DB_USER }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    env:
      DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
      APP_ENV: ${{ secrets.TEST_APP_ENV }}
      APP_SECRET: ${{ secrets.TEST_APP_SECRET }}
      JWT_SECRET_KEY: ${{ secrets.TEST_JWT_SECRET_KEY }}
      JWT_PUBLIC_KEY: ${{ secrets.TEST_JWT_PUBLIC_KEY }}
      JWT_PASSPHRASE: ${{ secrets.TEST_JWT_PASSPHRASE }}
      CORS_ALLOW_ORIGIN: ${{ secrets.TEST_CORS_ALLOW_ORIGIN }}
      MESSENGER_TRANSPORT_DSN: ${{ secrets.TEST_MESSENGER_TRANSPORT_DSN }}
      MAILER_DSN: ${{ secrets.TEST_MAILER_DSN }}
      API_DEFAULT_URI: ${{ secrets.TEST_API_DEFAULT_URI }}
      API_CLIENT_URL: ${{ secrets.TEST_API_CLIENT_URL }}
      TRANSACTIONAL_EMAIL_ADDRESS: ${{ secrets.TEST_TRANSACTIONAL_EMAIL_ADDRESS }}
    steps:
      - uses: actions/checkout@v3
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: phpunit
      - name: Install dependencies
        run: |
          cd ./api
          composer install --optimize-autoloader
      - name: Create database
        run: |
          cd ./api
          php bin/console d:s:c
      - name: Keys
        run: |
          cd ./api
          sh -c '
            set -e
            php bin/console lexik:jwt:generate-keypair
            setfacl -R -m u:www-data:rX -m u:"$(whoami)":rwX config/jwt
            setfacl -dR -m u:www-data:rX -m u:"$(whoami)":rwX config/jwt
          '
      - name: Tests
        run: |
          cd ./api
          php bin/phpunit

  deploy-front:
    runs-on: ubuntu-latest
    needs: test-front
    if: ${{ github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' }}
    steps:
      - uses: actions/checkout@v3
      - name: Copy front deploy workflow
        run: |
          mkdir ./front/.github && mkdir ./front/.github/workflows
          cp ./.github/workflows/deploy-front.yml ./front/.github/workflows/deploy-front.yml
      - name: Push to front branch
        uses: s0/git-publish-subdir-action@develop
        env:
          REPO: self
          BRANCH: front
          FOLDER: front
          MESSAGE: "deploy front"
          GITHUB_TOKEN: ${{ secrets.PAT }}

  push-api:
    runs-on: ubuntu-latest
    # needs: test-api
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - uses: axelerant/platformsh-deploy-action@v1
        with:
          project-id: ${{ secrets.PLATFORM_PROJECT_ID }}
          cli-token: ${{ secrets.PLATFORM_CLI_TOKEN }}
          php-version: 8.1
          force-push: true

  publish-docker-image:
    runs-on: ubuntu-latest
    needs: [test-front, test-api]
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push front image
        uses: docker/build-push-action@v3
        with:
          file: ./docker/front/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/esgi-challenge-front:latest
      - name: Build and push api image
        uses: docker/build-push-action@v3
        with:
          file: ./docker/api/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/esgi-challenge-api:latest